// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ApiRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromString(""));
    this.set("available", Value.fromBoolean(false));
    this.set("message", Value.fromString(""));
    this.set("url", Value.fromString(""));
    this.set("plans", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ApiRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ApiRecord entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ApiRecord", id.toString(), this);
    }
  }

  static load(id: string): ApiRecord | null {
    return changetype<ApiRecord | null>(store.get("ApiRecord", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get available(): boolean {
    let value = this.get("available");
    return value!.toBoolean();
  }

  set available(value: boolean) {
    this.set("available", Value.fromBoolean(value));
  }

  get message(): string {
    let value = this.get("message");
    return value!.toString();
  }

  set message(value: string) {
    this.set("message", Value.fromString(value));
  }

  get url(): string {
    let value = this.get("url");
    return value!.toString();
  }

  set url(value: string) {
    this.set("url", Value.fromString(value));
  }

  get plans(): Array<string> {
    let value = this.get("plans");
    return value!.toStringArray();
  }

  set plans(value: Array<string>) {
    this.set("plans", Value.fromStringArray(value));
  }
}

export class PlanRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromString(""));
    this.set("pricePerSecond", Value.fromBigInt(BigInt.zero()));
    this.set("perMonthLimit", Value.fromBigInt(BigInt.zero()));
    this.set("perSecondLimit", Value.fromBigInt(BigInt.zero()));
    this.set("active", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PlanRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PlanRecord entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PlanRecord", id.toString(), this);
    }
  }

  static load(id: string): PlanRecord | null {
    return changetype<PlanRecord | null>(store.get("PlanRecord", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get pricePerSecond(): BigInt {
    let value = this.get("pricePerSecond");
    return value!.toBigInt();
  }

  set pricePerSecond(value: BigInt) {
    this.set("pricePerSecond", Value.fromBigInt(value));
  }

  get perMonthLimit(): BigInt {
    let value = this.get("perMonthLimit");
    return value!.toBigInt();
  }

  set perMonthLimit(value: BigInt) {
    this.set("perMonthLimit", Value.fromBigInt(value));
  }

  get perSecondLimit(): BigInt {
    let value = this.get("perSecondLimit");
    return value!.toBigInt();
  }

  set perSecondLimit(value: BigInt) {
    this.set("perSecondLimit", Value.fromBigInt(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }
}

export class StatusRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromString(""));
    this.set("user", Value.fromString(""));
    this.set("remainingQuota", Value.fromBigInt(BigInt.zero()));
    this.set("planId", Value.fromBigInt(BigInt.zero()));
    this.set("active", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StatusRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StatusRecord entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StatusRecord", id.toString(), this);
    }
  }

  static load(id: string): StatusRecord | null {
    return changetype<StatusRecord | null>(store.get("StatusRecord", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get remainingQuota(): BigInt {
    let value = this.get("remainingQuota");
    return value!.toBigInt();
  }

  set remainingQuota(value: BigInt) {
    this.set("remainingQuota", Value.fromBigInt(value));
  }

  get planId(): BigInt {
    let value = this.get("planId");
    return value!.toBigInt();
  }

  set planId(value: BigInt) {
    this.set("planId", Value.fromBigInt(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }
}

export class Subscriptions extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromString(""));
    this.set("subscribers", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Subscriptions entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Subscriptions entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Subscriptions", id.toString(), this);
    }
  }

  static load(id: string): Subscriptions | null {
    return changetype<Subscriptions | null>(store.get("Subscriptions", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get subscribers(): Array<string> {
    let value = this.get("subscribers");
    return value!.toStringArray();
  }

  set subscribers(value: Array<string>) {
    this.set("subscribers", Value.fromStringArray(value));
  }
}

export class UserSubscription extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromString(""));
    this.set("planIndex", Value.fromBigInt(BigInt.zero()));
    this.set("status", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserSubscription entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserSubscription entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserSubscription", id.toString(), this);
    }
  }

  static load(id: string): UserSubscription | null {
    return changetype<UserSubscription | null>(
      store.get("UserSubscription", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get planIndex(): BigInt {
    let value = this.get("planIndex");
    return value!.toBigInt();
  }

  set planIndex(value: BigInt) {
    this.set("planIndex", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}
